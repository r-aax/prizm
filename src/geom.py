# -*- coding: utf-8 -*-
"""
Geom 3D point.

Created on Wed Jun  5 13:55:30 2019

@author: Rybakov
"""

import mth
import math

#---------------------------------------------------------------------------------------------------
# Class point.
#---------------------------------------------------------------------------------------------------

class Vector:

#---------------------------------------------------------------------------------------------------

    def __init__(self, t = (0.0, 0.0, 0.0)):
        """
        Constructor.

        Arguments:
            t -- tuple of coordinates.
        """

        (x, y, z) = t
        self.X = x
        self.Y = y
        self.Z = z

#---------------------------------------------------------------------------------------------------

    def __repr__(self):
        """
        Convert to string.

        Result:
            String.
        """

        return '(%f, %f, %f)' % (self.X, self.Y, self.Z)

#---------------------------------------------------------------------------------------------------

    def Mod2(self):
        """
        Square of module.

        Result:
            Square of module.
        """

        return self.X * self.X + self.Y * self.Y + self.Z * self.Z

#---------------------------------------------------------------------------------------------------

    def Mod(self):
        """
        Module.

        Result:
            Module.
        """

        return math.sqrt(self.Mod2())

#---------------------------------------------------------------------------------------------------

    def DistTo(self, v):
        """
        Distance to.

        Arguments:
            v -- vector.

        Result:
            Distance.
        """

        return mth.hypot(self.X - v.X, self.Y - v.Y, self.Z - v.Z)

#---------------------------------------------------------------------------------------------------

    def __lt__(self, v):
        """
        Overload '<'

        Arguments:
            v -- vector.

        Result:
            Boolean value.
        """

        return (self.X, self.Y, self.Z) < (v.X, v.Y, v.Z)

#---------------------------------------------------------------------------------------------------
# Tests.
#---------------------------------------------------------------------------------------------------

if __name__ == '__main__':
    pass

#---------------------------------------------------------------------------------------------------
